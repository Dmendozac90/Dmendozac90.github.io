---
layout: post
title:  "Introduction to Dynamic Mode Decomposition"
date:   2021-11-03 14:30:22 -0600
categories: python DynamicModeDecompostion
language: [python]
---

**Outline**
- [Introduction](#Introduction)
- [The DMD Algorithm](#The DMD Algorithm)

## Introduction

The dynamic mode decomposition (DMD) is a powerful data-driven technique used to identify dynamical systems from high-dimensional data. Many complex dynamical systems evolve on a low-dimesnional attractor that may be characterized by spatiotemporal coherent structures. This method provides an *equation-free* way of approximating nonlinear dynamics that may be utilized for future state prediction and control for a limited time. The DMD framework originated within the fluid dynamics community; however, the growth of abundant data sources and improved algorithms, have extended its applications to fields like finance, plasma physics, robotics, epidemiology, and neuroscince.

The DMD algorithm finds the best-fit linear dynamical system that moves high-dimensional data forward in time. In this post I will briefly provide the backgrown of the DMD algorithm and demonstrate its effectiveness on a toy dataset.

## The DMD Algorithm
The DMD algorithm is applied on a dataset that evolves through time. Data is collected in a matrix with the system states along the rows of the matrix and the time as its columns. 

$$
\mathbf{X} = 
\begin{bmatrix}
| & | & &|\\
\mathbf{x}(t_1) & \mathbf{x}(t_2) & ... & \mathbf{x}(t_{m-1})\\
| & | &  &|
\end{bmatrix}
 

\mathbf{X'} = 
\begin{bmatrix}
| & | & &|\\
\mathbf{x}(t_2) & \mathbf{x}(t_3) & ... & \mathbf{x}(t_m)\\
| & | &  &|
\end{bmatrix}
$$

The objective of the DMD algorithm is to find the best-fit linear operator $$\mathbf{A}$$ that can relate the two matricies $$\mathbf{X}$$ and $$\mathbf{X'}$$. This is achieved via the spectral decomposition of $$\mathbf{A}$$.

$$
\mathbf{X'} \approx \mathbf{A}\mathbf{X}
$$

The matrix $$\mathbf{A}$$ is given by 

$$\mathbf{A} = \mathbf{X'}\mathbf{X}^\dagger$$

where $$\dagger$$ is the Moore-Penrose psudoinverse. This solution minimizes the error

$$
\begin{Vmatrix}
\mathbf{X'} - \mathbf{A}\mathbf{X}
\end{Vmatrix}_F
$$

where $$\begin{Vmatrix}\cdot\end{Vmatrix}_F$$ 
is the Frobenius norm and is given by

$$
\sqrt{\sum_{j=1}^{n}\sum_{k=1}^{m}x_{jk}^2}
$$

For a high-dimensional state vector $$\mathbf{x} \in \mathbb{R}^n$$, the matrix $$\mathbf{A}$$ will have $$n^2$$ elements. It is not unlikely to have a vector with millions of entries and thus the operator will have over a trillion elemets. It is intracetable to represent this operator much less compute its spectral decomposition. Instead, the DMD algorithm takes advantege of dimensionality reduction to determine the dominant eigenvalues and eigenvectors of $$\mathbf{A}$$ without any explicit computations of $$\mathbf{A}$$.

This is done by computing the singular value decomposition of the matrix $$\mathbf{X}$$ and substituting the decomposition values into $$\mathbf{X}^\dagger$$. Instead of computing $$\mathbf{A}$$, the projection of $$\mathbf{A}$$ onto the leading singular vectors is computed which results in a small matrix $$\mathbf{\tilde{A}}$$ and the dat matrix $$\mathbf{X}$$ without ever computing the full matrix $$\mathbf{A}$$.

The exact DMD algorithm is as follows:

Step 1. Compute the singular value decomposition of $$\mathbf{X}$$:

$$
\mathbf{X} \approx \mathbf{\tilde{U}}\mathbf{\tilde{\Sigma}}\mathbf{\tilde{V}}^*
$$

where $$\mathbf{\tilde{U}} \in \mathbb{C}^{nxr}$$, $$\mathbf{\tilde{\Sigma}} \in \mathbb{C}^{rxr}$$, and $$\mathbf{\tilde{V}} \in \mathbb{C}^{mxr}$$. The colums of the matrix $$\mathbf{\tilde{U}}$$ are known as the POD modes and they satisfy $$\mathbf{\tilde{U}}^*\mathbf{\tilde{U}}=\mathbf{I}$$. The columns of $$\mathbf{\tilde{V}}$$ are also orthonormal and satisfy $$\mathbf{\tilde{V}}^*\mathbf{\tilde{V}}=\mathbf{I}$$
 
{% highlight python%}
import numpy as np
print("hello")
for i in range(len(x)):
  slice = i
{% endhighlight%}

{% highlight python %}
import numpy as np 
for i in range(len(x)):
  slice = i
print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyllâ€™s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
